package com.narae.fliwith.src.main.map

import android.Manifest.permission
import android.annotation.SuppressLint
import android.app.AlertDialog
import android.content.Context.LOCATION_SERVICE
import android.content.Intent
import android.content.pm.PackageManager
import android.graphics.Color
import android.graphics.drawable.ColorDrawable
import android.location.LocationManager
import android.net.Uri
import android.os.Bundle
import android.provider.Settings
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.WindowManager
import androidx.core.content.ContextCompat
import androidx.core.os.bundleOf
import androidx.fragment.app.activityViewModels
import androidx.lifecycle.lifecycleScope
import com.google.android.gms.location.LocationServices
import com.gun0912.tedpermission.PermissionListener
import com.gun0912.tedpermission.normal.TedPermission
import com.kakao.vectormap.KakaoMap
import com.kakao.vectormap.KakaoMapReadyCallback
import com.kakao.vectormap.LatLng
import com.kakao.vectormap.MapLifeCycleCallback
import com.kakao.vectormap.MapView
import com.kakao.vectormap.camera.CameraAnimation
import com.kakao.vectormap.camera.CameraUpdateFactory
import com.kakao.vectormap.label.LabelLayer
import com.kakao.vectormap.label.LabelOptions
import com.kakao.vectormap.label.LabelStyle
import com.kakao.vectormap.label.LabelStyles
import com.kakao.vectormap.label.LabelTextStyle
import com.narae.fliwith.R
import com.narae.fliwith.config.BaseFragment
import com.narae.fliwith.databinding.DialogRequestActivateBinding
import com.narae.fliwith.databinding.DialogRequestPermissionsBinding
import com.narae.fliwith.databinding.FragmentMapBinding
import com.narae.fliwith.src.main.map.MapApi.mapService
import com.narae.fliwith.src.main.map.models.SpotRequest
import com.narae.fliwith.src.main.map.models.SpotWithLocation
import com.narae.fliwith.src.main.recommend.models.RecommendViewModel
import com.narae.fliwith.util.setOnSingleClickListener
import com.narae.fliwith.util.showCustomSnackBar
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext

private const val TAG = "MapFragment"

class MapFragment : BaseFragment<FragmentMapBinding>(FragmentMapBinding::inflate) {

    private lateinit var mapView: MapView
    private lateinit var homeLocation: LatLng
    private var centerPosition = LatLng.from(37.547850180, 127.074454848)
    private lateinit var homeLabelStyles: LabelStyles
    private lateinit var labelStyles: LabelStyles
    private lateinit var map: KakaoMap
    private var spots: List<SpotWithLocation> = mutableListOf()

    private val recommendViewModel by activityViewModels<RecommendViewModel>()

    private val lifecycleCallback = object : MapLifeCycleCallback() {
        // ÏßÄÎèÑ API Í∞Ä Ï†ïÏÉÅÏ†ÅÏúºÎ°ú Ï¢ÖÎ£åÎê† Îïå Ìò∏Ï∂úÎê®
        override fun onMapDestroy() {
        }

        // Ïù∏Ï¶ù Ïã§Ìå® Î∞è ÏßÄÎèÑ ÏÇ¨Ïö© Ï§ë ÏóêÎü¨Í∞Ä Î∞úÏÉùÌï† Îïå Ìò∏Ï∂úÎê®
        override fun onMapError(p0: Exception?) {
        }
    }

    private val kakaoMapReadyCallback = object : KakaoMapReadyCallback() {

        // Ïù∏Ï¶ù ÌõÑ API Í∞Ä Ï†ïÏÉÅÏ†ÅÏúºÎ°ú Ïã§ÌñâÎê† Îïå Ìò∏Ï∂úÎê®
        override fun onMapReady(p0: KakaoMap) {
            map = p0
            homeLabelStyles =
                map.labelManager?.addLabelStyles(
                    LabelStyles.from(
                        LabelStyle.from(R.drawable.home_marker)
                            .setTextStyles(LabelTextStyle.from(22, R.color.grey))
                    )
                )!!
            labelStyles =
                map.labelManager?.addLabelStyles(LabelStyles.from(LabelStyle.from(R.drawable.spot)))!!
            map.cameraMaxLevel = 19
            map.cameraMinLevel = 8

            if (::homeLocation.isInitialized) {
                restoreMap()
            } else {
                setInitialLocation()
            }

            map.setOnCameraMoveEndListener { _, cameraPosition, _ ->
                centerPosition = cameraPosition.position
            }

            setListeners()
        }

        @SuppressLint("MissingPermission")
        private fun setInitialLocation() {
            val locationClient = LocationServices.getFusedLocationProviderClient(requireContext())
            locationClient.lastLocation.addOnCompleteListener {
                val location = if (it.isSuccessful && it.result != null) {
                    LatLng.from(it.result.latitude, it.result.longitude)
                } else {
                    centerPosition
                }

                map.moveCamera(CameraUpdateFactory.newCenterPosition(location))
                homeLocation = LatLng.from(location.latitude, location.longitude)
                centerPosition = homeLocation
                setHomeLabel()
            }
        }

        // ÏßÄÎèÑ ÏãúÏûë Ïãú ÌôïÎåÄ/Ï∂ïÏÜå Ï§å Î†àÎ≤® ÏÑ§Ï†ï
        override fun getZoomLevel(): Int {
            return 13
        }

        override fun getPosition(): LatLng {
            return super.getPosition()
        }
    }

    private fun restoreMap() {
        map.moveCamera(CameraUpdateFactory.newCenterPosition(centerPosition))
        spots.forEach {
            setLabel(it)
        }
        setHomeLabel()
        setMarkerTouchEvent()
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        mapView = binding.mapView

        val window = requireActivity().window
        // ÌîåÎûòÍ∑∏Î•º Ï∂îÍ∞ÄÌïòÏó¨ ÏãúÏä§ÌÖú Î∞î(ÏÉÅÌÉúÎ∞î Î∞è ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Î∞î)Í∞Ä ÏúàÎèÑÏö∞ Î∞∞Í≤ΩÏùÑ Í∑∏Î¶¨ÎèÑÎ°ù ÏÑ§Ï†ï
        window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS)
        // ÌîåÎûòÍ∑∏Î•º Ï†úÍ±∞ÌïòÏó¨ ÏÉÅÌÉúÎ∞îÎ•º Î∞òÌà¨Î™Ö Î™®ÎìúÏóêÏÑú Ìï¥Ï†ú
        window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS)
        // ÏÉÅÌÉúÎ∞îÏùò Î∞∞Í≤ΩÏÉâÏùÑ Ìà¨Î™ÖÏúºÎ°ú ÏÑ§Ï†ï
        window.statusBarColor = Color.TRANSPARENT
        window.decorView.systemUiVisibility = (
                // Ïï±Ïù¥ Ï†ÑÏ≤¥ ÌôîÎ©¥ Î†àÏù¥ÏïÑÏõÉ Î™®ÎìúÏóêÏÑú ÏûëÎèô, ÏãúÏä§ÌÖú UIÏùò Î†àÏù¥ÏïÑÏõÉ ÏïàÏ†ïÏÑ±ÏùÑ Ïú†ÏßÄ, ÏÉÅÌÉúÎ∞îÏùò ÏïÑÏù¥ÏΩòÍ≥º ÌÖçÏä§Ìä∏Î•º ÏßÑÌïòÍ≤å ÏÑ§Ï†ï
                View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN or
                        View.SYSTEM_UI_FLAG_LAYOUT_STABLE or
                        View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR
                )

        checkPermissions()
        checkLocationActivated()
    }

    // FragmentÍ∞Ä ÏÇ¨ÎùºÏßà Îïå ÏÉÅÌÉúÎ∞î ÏõêÏÉÅÎ≥µÍµ¨
    override fun onDestroyView() {
        super.onDestroyView()
        // ÏÉÅÌÉúÎ∞î Î∞è ÏãúÏä§ÌÖú UI ÏÑ§Ï†ï ÏõêÏÉÅÎ≥µÍ∑Ä
        val window = requireActivity().window
        // ÏÉÅÌÉúÎ∞î Î∞∞Í≤Ω Í∑∏Î¶¨Îäî ÌîåÎûòÍ∑∏ Îã§Ïãú Ï∂îÍ∞Ä
        window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS)
        // Î∞òÌà¨Î™Ö Î™®ÎìúÏóêÏÑú Ìï¥Ï†ú
        window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS)
        // ÏÉÅÌÉúÎ∞î ÏÉâÏÉÅ Ìù∞ÏÉâÏúºÎ°ú Î≥ÄÍ≤Ω
        window.statusBarColor = ContextCompat.getColor(requireContext(), R.color.white)
        // ÏÉÅÌÉúÎ∞î ÏïÑÏù¥ÏΩòÍ≥º ÌÖçÏä§Ìä∏Î•º ÏßÑÌïòÍ≤å ÏÑ§Ï†ï
        window.decorView.systemUiVisibility = View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR
    }

    private fun setListeners() {
        // Í≤ÄÏÉâ Î≤ÑÌäº ÌÑ∞Ïπò Ïãú
        binding.layoutFab.setOnSingleClickListener {
            if (!(requireContext().getSystemService(LOCATION_SERVICE) as LocationManager).isProviderEnabled(
                    LocationManager.FUSED_PROVIDER
                )
            ) {
                showLocationActivateDialog()
                return@setOnSingleClickListener
            }

            if (!isLocationPermissionsPermitted()) {
                showPermissionDialog()
                return@setOnSingleClickListener
            }
            searchSpots()
        }

        // ÌòÑ ÏúÑÏπò ÌÑ∞Ïπò Ïãú
        binding.btnHome.setOnSingleClickListener {
            map.moveCamera(
                CameraUpdateFactory.newCenterPosition(homeLocation),
                CameraAnimation.from(500, true, true)
            )
        }
    }

    private fun searchSpots() {
        lifecycleScope.launch {
            mLoadingDialog.show()
            runCatching {
                withContext(Dispatchers.IO) {
                    mapService.searchByLocation(
                        centerPosition.latitude,
                        centerPosition.longitude,
                    )
                }
            }.onSuccess { response ->
                if (response.isSuccessful) {
                    // Í∏∞Ï°¥ Î™®Îì† ÎùºÎ≤® ÏßÄÏö∞Í∏∞
                    val layer: LabelLayer = map.labelManager?.layer!!
                    layer.removeAll()
                    // Ìôà ÎùºÎ≤® Ï∞çÏñ¥Ï£ºÍ∏∞
                    setHomeLabel()
                    spots = response.body()?.spotList!!

                    // Ï°∞Ìöå Í≤∞Í≥ºÍ∞Ä ÎπÑÏñ¥ ÏûàÏúºÎ©¥
                    if (spots.isEmpty()) {
                        showCustomSnackBar(requireContext(), binding.root, "Ï£ºÎ≥ÄÏóê Í¥ÄÍ¥ëÏßÄÍ∞Ä ÏóÜÏñ¥Ïöî üò≠")
                    }
                    // ÏûàÏúºÎ©¥
                    else {
                        spots.forEach {
                            setLabel(it)
                        }
                        setMarkerTouchEvent()
                        showCustomSnackBar(requireContext(), binding.root, "Ï£ºÎ≥Ä Í¥ÄÍ¥ëÏßÄÎ•º Ï∞æÏïòÏñ¥Ïöî")
                    }
                } else {
                    Log.d(TAG, "searchSpots Error: ${response.errorBody()?.string()}")
                    showCustomSnackBar(requireContext(), binding.root, "Í≤ÄÏÉâ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.")
                }
            }.onFailure { e ->
                Log.e(TAG, "Network error: ${e.message}")
                showCustomSnackBar(requireContext(), binding.root, "Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥ Ï£ºÏÑ∏Ïöî.")
            }.also {
                mLoadingDialog.dismiss()
            }
        }
    }

    private fun setLabel(spot: SpotWithLocation) {
        val options =
            LabelOptions.from(LatLng.from(spot.latitude, spot.longitude)).setStyles(labelStyles)
        options.tag = spot
        val layer: LabelLayer = map.labelManager?.layer!!
        layer.addLabel(options)
    }

    private fun setMarkerTouchEvent() {
        // Îßµ ÎùºÎ≤® ÌÅ¥Î¶≠Ïãú ÏÉÅÏÑ∏ ÌéòÏù¥ÏßÄ Î≥¥Ïó¨Ï£ºÍ∏∞
        map.setOnLabelClickListener { _, _, label ->
            mLoadingDialog.show()

            val spotItem = label.tag as SpotWithLocation
            val request =
                SpotRequest(spotItem.contentTypeId.toString(), spotItem.contentId.toString())
            recommendViewModel.fetchTourDetailData(request) { success ->
                if (success) {

                    val bundle = bundleOf().apply {
                        putBoolean("fromMap", true)
                    }
                    navController.navigate(
                        R.id.action_menu_main_btm_nav_map_to_recommendAIFragment,
                        bundle
                    )
                } else {
                    showCustomSnackBar(requireContext(), binding.root, "Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥ Ï£ºÏÑ∏Ïöî")
                    Log.d(TAG, "ÏÉÅÏÑ∏ Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ïò§Î•ò")
                }
                mLoadingDialog.dismiss()
            }
        }
    }

    private fun setHomeLabel() {
        val options = LabelOptions.from(homeLocation).setStyles(homeLabelStyles).setTexts("ÌòÑÏúÑÏπò")
            .apply { isClickable = false }
        val layer: LabelLayer = map.labelManager?.getLayer()!!
        layer.addLabel(options)
    }

    private fun isLocationPermissionsPermitted(): Boolean {
        val permissions = arrayOf(
            permission.ACCESS_COARSE_LOCATION,
            permission.ACCESS_FINE_LOCATION
        )

        val result = permissions.filter { permission ->
            ContextCompat.checkSelfPermission(
                requireContext(),
                permission
            ) == PackageManager.PERMISSION_DENIED
        }

        return result.isEmpty()
    }


    private fun checkLocationActivated() {
        val locationManager = requireContext().getSystemService(LOCATION_SERVICE) as LocationManager
        if (!locationManager.isProviderEnabled(LocationManager.FUSED_PROVIDER)) {
            showLocationActivateDialog()
        }
    }

    private fun showLocationActivateDialog() {
        lateinit var dialog: AlertDialog
        val dialogBinding =
            DialogRequestActivateBinding.inflate(LayoutInflater.from(requireContext()))
                .apply {
                    btnCancel.setOnClickListener {
                        dialog.dismiss()
                    }
                    btnGo.setOnClickListener {
                        startActivity(Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS))
                        dialog.dismiss()
                    }
                }
        dialog = AlertDialog.Builder(requireContext()).setView(dialogBinding.root).show()
        dialog.getWindow()?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT));
    }

    private fun checkPermissions() {
        TedPermission.create().setPermissionListener(
            object : PermissionListener {
                override fun onPermissionGranted() {
                    mapView.start(lifecycleCallback, kakaoMapReadyCallback)
                }

                override fun onPermissionDenied(deniedPermissions: MutableList<String>?) {
                    showPermissionDialog()
                }
            }
        ).setPermissions(
            permission.ACCESS_FINE_LOCATION,
            permission.ACCESS_COARSE_LOCATION
        ).check()
    }

    fun showPermissionDialog() {
        lateinit var dialog: AlertDialog
        val dialogBinding =
            DialogRequestPermissionsBinding.inflate(LayoutInflater.from(requireContext()))
                .apply {
                    btnCancel.setOnClickListener {
                        dialog.dismiss()
                    }
                    btnGo.setOnClickListener {
                        val intent =
                            Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS)
                        val uri = Uri.fromParts(
                            "package",
                            requireActivity().packageName,
                            null
                        )
                        intent.setData(uri)
                        startActivity(intent)
                        dialog.dismiss()
                    }
                }
        dialog =
            AlertDialog.Builder(requireContext()).setView(dialogBinding.root).show()
        dialog.getWindow()?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT));
    }

    override fun onResume() {
        super.onResume()
        if (::mapView.isInitialized && mapView.isActivated)
            mapView.resume()
    }

    override fun onPause() {
        super.onPause()
        if (::mapView.isInitialized && mapView.isActivated)
            mapView.pause()
    }

}